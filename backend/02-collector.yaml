apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: observability
spec:
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.80.0
  mode: deployment
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint:
              0.0.0.0:4317
          http:
            endpoint:
              0.0.0.0:4318
      jaeger:
        protocols:
          grpc:
          thrift_binary:
          thrift_compact:
          thrift_http:
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: [ '0.0.0.0:8888' ]

    processors:
      batch:
      attributes:
        actions:
        - key: "http.target"
          pattern: ^.*\?player=(?P<player>.*)
          action: extract
      memory_limiter:
        check_interval: 1s
        limit_percentage: 50
        spike_limit_percentage: 30
        limit_mib: 2000

    exporters:
      jaeger:
        endpoint: http://simplest-collector.default.svc.cluster.local:14250
        tls:
          insecure: true
      prometheusremotewrite:
        endpoint: "http://prometheus-kube-prometheus-prometheus.default.svc.cluster.local:9090/api/v1/write"
        external_labels:
          cluster: prod
      logging:
        loglevel: info

    service:
      #extensions: [pprof, zpages, health_check]
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, batch]
          exporters: [logging, jaeger]
        metrics:
          receivers: [prometheus, otlp]
          processors: [memory_limiter, batch]
          exporters: [prometheusremotewrite, logging]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [logging]
